{"version":3,"sources":["Services/Auth/Auth.Service.js","Services/Common/EventBus.js","Components/Home.js","Components/Schedule.js","App.js","serviceWorker.js","index.js"],"names":["login","username","password","axios","post","then","res","data","accessToken","localStorage","setItem","JSON","stringify","AuthService","logout","removeItem","getCurrentUser","parse","getItem","EventBus","on","event","callback","document","addEventListener","e","detail","dispatch","dispatchEvent","CustomEvent","remove","removeEventListener","Home","navigate","useNavigate","useState","setUsername","setPassword","setLoading","setMessage","Grid","container","justifyContent","alignItems","Paper","Box","Typography","TextField","label","helperText","variant","required","value","onChange","target","InputProps","startAdornment","InputAdornment","position","AccountCircle","Lock","Button","onClick","preventDefault","window","location","reload","err","console","log","Schedule","App","setShowAdminMenu","setShowClientMenu","undefined","setCurrentUser","useEffect","user","logOut","to","path","element","Boolean","hostname","match","defaults","baseURL","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb457d35.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst login = async (username, password) => {\r\n  return await axios\r\n    .post('auth/login', {\r\n      username,\r\n      password,\r\n    })\r\n    .then((res) => {\r\n      if (res.data.accessToken) {\r\n        localStorage.setItem('data', JSON.stringify(res.data))\r\n      }\r\n\r\n      return res.data\r\n    })\r\n}\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem('data')\r\n}\r\n\r\nconst getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem('user'))\r\n}\r\n\r\nconst AuthService = {\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n}\r\n\r\nexport default AuthService\r\n","const EventBus = {\r\n  on(event, callback) {\r\n    document.addEventListener(event, (e) => callback(e.detail))\r\n  },\r\n  dispatch(event, data) {\r\n    document.dispatchEvent(new CustomEvent(event, {detail: data}))\r\n  },\r\n  remove(event, callback) {\r\n    document.removeEventListener(event, callback)\r\n  }\r\n}\r\n\r\nexport default EventBus\r\n","import React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport AuthService from '../Services/Auth/Auth.Service'\r\n\r\nimport {\r\n  Box,\r\n  Grid,\r\n  InputAdornment,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n} from '@mui/material'\r\nimport { Lock, AccountCircle } from '@mui/icons-material'\r\n\r\nconst Home = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [message, setMessage] = useState('')\r\n\r\n  /**\r\n   * * Funcion Flechas onChange\r\n   */\r\n  const onChangeUsername = (e) => {\r\n    const username = e.target.value\r\n    setUsername(username)\r\n  }\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value\r\n    setPassword(password)\r\n  }\r\n\r\n  /**\r\n   * * Funcion Flecha onClick\r\n   */\r\n  const onClickLogin = (e) => {\r\n    e.preventDefault()\r\n\r\n    setMessage('')\r\n    setLoading(false)\r\n\r\n    AuthService.login(username, password).then(\r\n      () => {\r\n        navigate('/schedule')\r\n        window.location.reload()\r\n      },\r\n      (err) => {\r\n        const resMessage = 'message'\r\n\r\n        setLoading(true)\r\n        setMessage(resMessage)\r\n\r\n        console.log(err)\r\n      }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container justifyContent={'center'} alignItems={'center'}>\r\n        <Paper>\r\n          <Box>\r\n            <Typography>Login</Typography>\r\n          </Box>\r\n          <Box>\r\n            <TextField\r\n              label='Username'\r\n              helperText='Nunca compartir tu nombre de usuario.'\r\n              variant='standard'\r\n              required\r\n              value={username}\r\n              onChange={onChangeUsername}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position='start'>\r\n                    <AccountCircle />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <TextField\r\n              label='Password'\r\n              helperText='Nunca compartir tu nombre de contraseÃ±a.'\r\n              variant='standard'\r\n              required\r\n              value={password}\r\n              onChange={onChangePassword}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position='start'>\r\n                    <Lock />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Button onClick={onClickLogin}>Login In</Button>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst Schedule = () => {\r\n  return <h1>Schedule</h1>\r\n}\r\n\r\nexport default Schedule\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Routes, Route, Link } from 'react-router-dom'\r\n\r\nimport AuthService from './Services/Auth/Auth.Service'\r\nimport EventBus from './Services/Common/EventBus'\r\n\r\nimport Home from './Components/Home'\r\nimport Schedule from './Components/Schedule'\r\n\r\nconst App = () => {\r\n  const [showAdminMenu, setShowAdminMenu] = useState(true)\r\n  const [showClientMenu, setShowClientMenu] = useState(true)\r\n  const [currentUser, setCurrentUser] = useState(undefined)\r\n\r\n  useEffect(() => {\r\n    const user = AuthService.getCurrentUser()\r\n\r\n    if (user) {\r\n      setCurrentUser(user)\r\n      setShowClientMenu(user)\r\n      setShowAdminMenu(user)\r\n    }\r\n\r\n    EventBus.on('logout', () => {\r\n      logOut()\r\n    })\r\n\r\n    return () => {\r\n      EventBus.remove('logout')\r\n    }\r\n  }, [])\r\n\r\n  const logOut = () => {\r\n    AuthService.logout()\r\n\r\n    setCurrentUser(undefined)\r\n    setShowClientMenu(0)\r\n    setShowAdminMenu(0)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <nav>\r\n          <li>\r\n            <Link to='/'>Home</Link>\r\n          </li>\r\n\r\n          <li>\r\n            <Link to='schedule'>schedule</Link>\r\n          </li>\r\n        </nav>\r\n      </div>\r\n\r\n      <div>\r\n        <Routes>\r\n          <Route path='/' element={<Home />} />\r\n          <Route path='/schedule' element={<Schedule />} />\r\n        </Routes>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\r\n\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport axios from 'axios'\r\n\r\naxios.defaults.baseURL = 'https://enigmatic-sea-26384.herokuapp.com/api'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}